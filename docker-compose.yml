version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: court-argument
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_GRACEFUL_DEGRADATION=true
      - DB_RETRY_ATTEMPTS=10
      - DB_CONNECTION_TIMEOUT=15
    env_file:
      - .env
    depends_on:
      neo4j:
        condition: service_started
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - court-sim-network
    restart: unless-stopped

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: court-sim-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - court-sim-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readyz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: court-sim-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-password123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_server_bolt_advertised__address=neo4j:7687
      - NEO4J_server_bolt_listen__address=0.0.0.0:7687
    networks:
      - court-sim-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-password123}", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: court-sim-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - court-sim-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Celery Worker (for async tasks)
  celery-worker:
    build: .
    container_name: court-sim-celery-worker
    command: celery -A src.services.tasks worker --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - QDRANT_HOST=qdrant
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
    env_file:
      - .env
    depends_on:
      - redis
      - qdrant
      - neo4j
    networks:
      - court-sim-network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build: .
    container_name: court-sim-celery-beat
    command: celery -A src.services.tasks beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - court-sim-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: court-sim-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - court-sim-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: court-sim-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - prometheus
    networks:
      - court-sim-network
    restart: unless-stopped

  # MCP Lawyer Server
  mcp-lawyer-server:
    build:
      context: .
      dockerfile: mcp_lawyer_server/Dockerfile
    container_name: mcp-lawyer-server
    ports:
      - "3000:3000"
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_CONFIG_PATH=/app/mcp_lawyer_server/config.yaml
      - GRAPHRAG_BASE_URL=http://app:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    env_file:
      - .env
    volumes:
      - ./mcp_lawyer_server:/app/mcp_lawyer_server
    depends_on:
      - app
      - redis
    networks:
      - court-sim-network
    restart: unless-stopped
    stdin_open: true
    tty: true

networks:
  court-sim-network:
    driver: bridge

volumes:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  prometheus_data:
  grafana_data: